volumes:
    sitebuild:
        driver: local
        driver_opts:
            type: ext4
            o: bind
            device: ${WEBSITE_FOLDER}
    betabuild:
        driver: local
        driver_opts:
            type: ext4
            o: bind
            device: ${BETA_FOLDER}
    devbuild:
        driver: local
        driver_opts:
            type: ext4
            o: bind
            device: ${DEV_FOLDER}
    config:
    assets:
        driver: local
        driver_opts:
            type: ext4
            o: bind
            device: ${ASSETS_FOLDER}
    profiles:
        driver: local
        driver_opts:
            type: ext4
            o: bind
            device: ${PROFILES_FOLDER}
    traindata:
    nginx-logs:
    site-logs:
    bot-logs:
    datacore-mongo:
    sqlite:
        driver: local
        driver_opts:
            type: ext4
            o: bind
            device: ${SQLITE_FOLDER}
    grafana-data:
        driver: local
        driver_opts:
            type: ext4
            o: bind
            device: ${GRAFANA_FOLDER}
    wiki:
    mariadb:

services:
    gittower:
        image: datacore/gittower
        build:
            context: contexts/gittower
            args:
                ALPINE_VERSION: ${ALPINE_VERSION}
                NODE_VERSION: ${NODE_VERSION}
        deploy:
            restart_policy:
                condition: on-failure
        container_name: gittower
        env_file:
            - .env
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - .:/docker
        profiles: ["all", "gittower", "fullstack"]

    pm2-discord:
        image: datacore/pm2-discord
        container_name: pm2-discord-base
        build:
            context: contexts/pm2-discord
            args:
                ALPINE_VERSION: ${ALPINE_VERSION}
                NODE_VERSION: ${NODE_VERSION}
                PM2_ERROR_URL: ${PM2_ERROR_URL}
                PM2_INFO_URL: ${PM2_INFO_URL}
        env_file:
            - .env
        profiles: ["all", "fullstack", "site-server", "website", "bot"]

    website:
        build:
            context: contexts/website
            additional_contexts:
                source: https://github.com/stt-datacore/website.git#${WEBSITE_BRANCH}
            args:
                ALPINE_VERSION: ${ALPINE_VERSION}
                NODE_VERSION: ${NODE_VERSION}
        env_file:
            - .env
            - ./conf/website.env
        deploy:
            restart_policy:
                condition: on-failure

        container_name: DCWebsite
        volumes:
            - sitebuild:/sitebuild:rw
        profiles: [ "website-build", "all", "website", "fullstack" ]

    beta-site:
        build:
            context: contexts/beta-site
            additional_contexts:
                source: https://github.com/stt-datacore/website.git#${BETA_BRANCH}
            args:
                ALPINE_VERSION: ${ALPINE_VERSION}
                NODE_VERSION: ${NODE_VERSION}
        env_file:
            - .env
            - ./conf/website.env
        deploy:
            restart_policy:
                condition: on-failure

        container_name: DCBetaSite
        volumes:
            - betabuild:/sitebuild:rw
        profiles: [ "beta-build" ]

    asset-server:
        image: datacore/asset-server
        build:
            context: contexts/asset-server
            additional_contexts:
                source: https://github.com/stt-datacore/asset-server.git#${ASSET_BRANCH}
                ssh_path: ${UTILS_SSH_PATH}
            args:
                WEBSITE_BRANCH: ${WEBSITE_BRANCH}
                ALPINE_VERSION: ${ALPINE_VERSION}
                NODE_VERSION: ${NODE_VERSION}
                SSH_KEY: ${UTILS_KEY_NAME}
                # Utils
                UTILS_REPO: ${UTILS_REPO}
                UTILS_BRANCH: ${UTILS_BRANCH}
                UTILS_DIR: ${UTILS_DIR}
                # Utils 2
                UTILS2_REPO: ${UTILS2_REPO}
                UTILS2_BRANCH: ${UTILS2_BRANCH}
                UTILS2_DIR: ${UTILS2_DIR}
                # Utils 3
                UTILS3_REPO: ${UTILS3_REPO}
                UTILS3_BRANCH: ${UTILS3_BRANCH}
                UTILS3_DIR: ${UTILS3_DIR}
            ssh:
                "default": ${UTILS_SSH_PATH}/${UTILS_KEY_NAME}
        container_name: DCAssetServer
        deploy:
            restart_policy:
                condition: on-failure
        volumes:
            - ${UTILS_SSH_PATH}:/root/.ssh
            - assets:/assets:rw
        environment:
            - OUT_PATH=/assets/
            - ASSET_ENV=${ASSET_ENV}
        env_file:
            - ./conf/assets.env
        profiles: [ "all", "asset-server", "website", "fullstack" ]

    # datacoredb:
    #     image: mongo:4.4.6
    #     container_name: datacoredb
    #     volumes:
    #         - datacore-mongo:/data/db
    #     env_file:
    #         - .env
    #     ports:
    #         - '27017-27019:27017-27019'
    #     profiles: ["all", "site-server", "bot", "fullstack" ]

    site-server:
        image: datacore/site-server
        build:
            context: contexts/site-server
            additional_contexts:
                source: https://github.com/stt-datacore/site-server.git#${SERVER_BRANCH}
                pm2-discord: contexts/pm2-discord
            target: ${BUILD_TYPE}
            args:
                $NODE_VERSION:
        container_name: DCSiteServer
        deploy:
            restart_policy:
                condition: on-failure
        ports:
            - "4420:4420"
        volumes:
            - site-logs:/data/logs:rw
            - profiles:/profiles:rw
            - sqlite:/sqlite
        env_file:
            - .env
            - ./conf/site-server.env
        depends_on:
            - pm2-discord
            # - datacoredb
        profiles: ["all", "site-server", "fullstack", "bot"]

    nginx:
        image: nginx:alpine${ALPINE_VERSION}
        container_name: NginxServer
        deploy:
            restart_policy:
                condition: on-failure
        restart: always
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - sitebuild:/sitebuild:ro
            - betabuild:/betabuild:ro
            - devbuild:/devbuild:ro
            - assets:/assets:ro
            - profiles:/profiles:ro
            - ${NGINX_EXTRA}:/data:ro
            - nginx-logs:/var/log/nginx:rw
            - ${NGINX_CONF}:/etc/nginx/conf.d/default.conf:rw
        depends_on:
            - site-server
            # - datacoredb
        profiles: [ "all", "website", "asset-server", "site-server", "fullstack", "bot" ]

    # mediawiki:
    #     image: mediawiki
    #     container_name: MediaWiki
    #     deploy:
    #         restart_policy:
    #             condition: on-failure
    #     volumes:
    #         - wiki:/var/www/html:rw
    #     ports:
    #         - 8290:80
    #     links:
    #         - database
    #     profiles: [ "all", "wiki" ]

    # database:
    #     image: mariadb
    #     restart: always
    #     container_name: wiki-mariadb
    #     environment:
    #         # @see https://phabricator.wikimedia.org/source/mediawiki/browse/master/includes/DefaultSettings.php
    #         MYSQL_DATABASE: my_wiki
    #         MYSQL_USER: wikiuser
    #         MYSQL_PASSWORD: example
    #         MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
    #     volumes:
    #         - mariadb:/var/lib/mysql
    #     profiles: [ "all", "wiki" ]

    # node_exporter:
    #     image: prom/node-exporter
    #     container_name: node_exporter
    #     ports:
    #         - "9100:9100"
    #     profiles: [ "all", "monitoring", "fullstack" ]

    # grafana:
    #     image: grafana/grafana-enterprise:latest
    #     container_name: grafana
    #     ports:
    #         - "3000:3000"
    #     volumes:
    #         - grafana-data:/var/lib/grafana:rw
    #     depends_on:
    #         - prometheus
    #     profiles: [ "all", "monitoring", "fullstack" ]

    # prometheus:
    #     image: prom/prometheus:latest
    #     container_name: prometheus
    #     ports:
    #         - "9090:9090"
    #     command:
    #         - --config.file=/etc/prometheus/prometheus.yml
    #     volumes:
    #         - ./contexts/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    #     depends_on:
    #         - cadvisor
    #     profiles: [ "all", "monitoring", "fullstack" ]

    # cadvisor:
    #     image: gcr.io/cadvisor/cadvisor:latest
    #     container_name: cadvisor
    #     deploy:
    #         restart_policy:
    #             condition: on-failure
    #     ports:
    #         - "8080:8080"
    #     volumes:
    #         - /:/rootfs:ro
    #         - /var/run:/var/run:rw
    #         - /sys:/sys:ro
    #         - /var/lib/docker/:/var/lib/docker:ro
    #     command: [ "--housekeeping_interval=30s", "--docker_only", "--disable_metrics=referenced_memory,disk,network,tcp,udp,percpu,sched,process" ]
    #     profiles: [ "all", "monitoring", "fullstack" ]

    # # rsync-host:
    #     image: hermsi/alpine-sshd
    #     container_name: RSyncHost
    #     deploy:
    #         restart_policy:
    #             condition: on-failure
    #     ports:
    #         - "1337:22"
    #     volumes:
    #         - sitebuild:/sitebuild:rw
    #         - assets:/data/assets:ro
    #         - profiles:/profiles:rw
    #         - traindata:/data/traindata:rw
    #         - nginx-logs:/logs/nginx:ro
    #         - site-logs:/logs/site-server:ro
    #     env_file:
    #         - ./conf/rsync.env
    #     profiles: [ "all", "rsync", "fullstack" ]

    cpp-image-analysis:
        image: datacore/cpp-image-analysis
        build:
            context: contexts/cpp-image-analysis
            target: ${BUILD_TYPE}
            additional_contexts:
                source: https://github.com/stt-datacore/cpp-image-analysis.git#${CPP_BRANCH}
            args:
                ALPINE_VERSION:
        container_name: DCImageAnalysis
        deploy:
            restart_policy:
                condition: on-failure
        env_file:
            - .env
            - ./conf/bot.env
            - ./conf/cpp-image-analysis.env
        ports:
            - 5000:5000
        volumes:
            - sitebuild:/sitebuild:ro
            - traindata:/traindata:rw
        depends_on:
            - pm2-discord
            - nginx
            - website
        profiles: [ "all", "bot" ]

    bot:
        image: datacore/bot
        build:
            context: contexts/bot
            additional_contexts:
                source: https://github.com/stt-datacore/bot.git#${BOT_BRANCH}
            target: ${BUILD_TYPE}
            args:
                NODE_VERSION:
        container_name: DCBot
        deploy:
            restart_policy:
                condition: on-failure
        volumes:
            - sitebuild:/sitebuild:ro
            - assets:/data/assets:ro
            - bot-logs:/data/logs:rw
            - profiles:/profiles:rw
            - sqlite:/sqlite
        env_file:
            - .env
            - ./conf/bot.env
        depends_on:
            - cpp-image-analysis
            # - datacoredb
        profiles: ["all", "bot"]