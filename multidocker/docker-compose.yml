version: '3'
volumes:
    sitebuild:
    assets:
    profiles:
    traindata:
    nginx-logs:
    site-logs:

services:
    gittower:
        build:
            context: gittower
        command: watch website https://github.com/stt-datacore/website.git ${WEBSITE_BRANCH} && gittower
        deploy:
            restart_policy: 
                condition: on-failure
        container_name: gittower  
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        profiles: ["all", "gittower"]

    website:
        build:
            context: https://github.com/stt-datacore/website.git#${WEBSITE_BRANCH}
            dockerfile_inline: |
                FROM node:16-alpine
                RUN apk add build-base python3 git
                WORKDIR /app
                # Sentry requires the github sha
                RUN git clone https://github.com/stt-datacore/website.git .git --bare --depth 1
                COPY . .
                RUN yarn install
                RUN npx update-browserslist-db@latest 
                CMD yarn run build
        environment:
            - GATSBY_ASSETS_URL=${ASSETS_URL}
            - GATSBY_DATACORE_URL=${DATACORE_URL}
        deploy:
            restart_policy: 
                condition: on-failure
                
        container_name: DCWebsite  
        volumes:
            - sitebuild:/app/public:rw
        profiles: ["all", "website", "asset-server", "site-server", "fullstack"]

    asset-server:
        build:
            context: https://github.com/stt-datacore/asset-server.git#${ASSET_BRANCH}
            dockerfile_inline: |
                FROM node:16-alpine
                RUN apk add bash python3 build-base
                RUN mkdir /app
                WORKDIR /app
                RUN echo */30 * * * * /app/exec.sh > crontab
                RUN crontab ./crontab
                COPY . .
                RUN npm install
                RUN npm run build
                CMD ./exec.sh && crond -f -l 8
        container_name: DCAssetServer 
        deploy:
            restart_policy: 
                condition: on-failure
        volumes:
            - assets:/assets:rw"

        environment:
            - OUT_PATH=/assets/
        profiles: [ "all", "asset-server", "fullstack"]

    site-server:
        build:
            context: https://github.com/stt-datacore/site-server.git#${SERVER_BRANCH}
            dockerfile_inline: |
                FROM keymetrics/pm2:latest-alpine
                RUN apk add python3 python2 build-base sqlite
                RUN mkdir /app
                WORKDIR /app
                COPY . .
                RUN npm install
                RUN npm run build
                CMD pm2-runtime --name server start npm -- start
        container_name: DCSiteServer 
        deploy:
            restart_policy: 
                condition: on-failure
        ports:
            - "4420:4420"
        volumes:
            - site-logs:/data/logs:rw
            - profiles:/data/profiles:rw"
            - ./datacore.db:/database
        environment:
            - PROFILE_DATA_PATH=/data/profiles
            - DB_CONNECTION_STRING=sqlite:/database
            - LOG_PATH=/data/logs/
        profiles: ["all", "site-server", "fullstack"]

    nginx:
        image: nginx:alpine
        container_name: NginxServer
        deploy:
            restart_policy:
                condition: on-failure
        ports:
            - "80:80"
            - "442:442"
        volumes:
            - sitebuild:/sitebuild:ro
            - assets:/assets:ro
            - profiles:/profiles:ro
            - ./nginx-sites/${NGINX_CONF}:/etc/nginx/conf.d/default.conf:rw
            - nginx-logs:/var/log/nginx:rw
            
        depends_on:
            - website
            - asset-server
            - site-server
        profiles: [ "all", "website", "asset-server", "site-server", "fullstack" ]

    node_exporter:
        image: prom/node-exporter
        container_name: node_exporter
        ports:
            - "9100:9100"
        profiles: [ "all", "monitoring" ]

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - "9090:9090"
        command:
            - --config.file=/etc/prometheus/prometheus.yml
        volumes:
            - "./prometheus.yml:/etc/prometheus/prometheus.yml:ro"
        depends_on:
            - cadvisor
        profiles: [ "all", "monitoring" ]

    cadvisor:
        image: gcr.io/google-containers/cadvisor:latest
        container_name: cadvisor
        deploy:
            restart_policy: 
                condition: on-failure
        ports:
            - "8080:8080"
        volumes:
            - "/:/rootfs:ro"
            - "/var/run:/var/run:rw"
            - "/sys:/sys:ro"
            - "/var/lib/docker/:/var/lib/docker:ro"
        command:
            - "--housekeeping_interval=30s"
            - "--docker_only"
            - "--disable_metrics=disk,network,tcp,udp,percpu,sched,process"
        profiles: [ "all", "monitoring" ]

    rsync-host:
        image: hermsi/alpine-sshd
        container_name: RSyncHost
        deploy:
            restart_policy: 
                condition: on-failure
        ports:
            - "1337:22"
        volumes:
            - "sitebuild:/data/sitebuild:rw"
            - "assets:/data/assets:rw"
            - "profiles:/data/profiles:rw"
            - "traindata:/data/traindata:rw"
            - "nginx-logs:/logs/nginx:ro"
            - "site-logs:/logs/site-server:ro"

        environment:
            - ROOT_PASSWORD=${RSYNC_PASSWORD}
        profiles: [ "all", "rsync", "fullstack" ]

    cpp-image-analysis:
        build: https://github.com/stt-datacore/cpp-image-analysis
        container_name: DCImageAnalysis 
        deploy:
            restart_policy: 
                condition: on-failure
        ports:
            - "5000:5000"
        volumes:
            - "sitebuild:/sitebuild:ro"
            - "./cvdata:/cdvdata:ro"
            - "traindata:/traindata:rw"
        command: --asseturl=${ASSETS_URL} --trainpath=/traindata/ --datapath=/cdvdata/ --jsonpath=/sitebuild/structured/
        profiles: [ "all", "bot" ]

    bot :
        image: ghcr.io/stt-datacore/bot:latest
        container_name: DCBot 
        deploy:
            restart_policy: 
                condition: on-failure
        network_mode: "host" # Is this needed?
        volumes:
            - ".:/data:rw"
            - "sitebuild:/sitebuild:ro"
        environment:
            - PROFILE_DATA_PATH=/data/profiles
            - DB_CONNECTION_STRING=sqlite:/data/datacore.db
            - LOG_PATH=/data/logs/
            - DC_DATA_PATH=/sitebuild/structured
            - CONFIG_PATH=/data/bot_config.json
        depends_on:
            - cpp-image-analysis
        profiles: ["all", "bot"]